"""add wake up keywords configuration to bot config

Revision ID: ec573ee0004b
Revises: ddfbf4361f5c
Create Date: 2025-06-09 17:06:43.732522

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'ec573ee0004b'
down_revision = 'ddfbf4361f5c'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('item')
    op.drop_index(op.f('idx_bot_monitored_chats_bot_id'), table_name='bot_monitored_chats')
    op.drop_table('bot_monitored_chats')
    op.drop_index(op.f('idx_user_sessions_expires_at'), table_name='user_sessions')
    op.drop_index(op.f('idx_user_sessions_is_active'), table_name='user_sessions')
    op.drop_index(op.f('idx_user_sessions_token_hash'), table_name='user_sessions')
    op.drop_index(op.f('idx_user_sessions_user_active_expires'), table_name='user_sessions')
    op.drop_index(op.f('idx_user_sessions_user_id'), table_name='user_sessions')
    op.drop_table('user_sessions')
    op.drop_index(op.f('idx_user_operation_logs_created_at'), table_name='user_operation_logs')
    op.drop_index(op.f('idx_user_operation_logs_operation_type'), table_name='user_operation_logs')
    op.drop_index(op.f('idx_user_operation_logs_operator_id'), table_name='user_operation_logs')
    op.drop_index(op.f('idx_user_operation_logs_operator_type_created'), table_name='user_operation_logs')
    op.drop_index(op.f('idx_user_operation_logs_result'), table_name='user_operation_logs')
    op.drop_index(op.f('idx_user_operation_logs_target_user_id'), table_name='user_operation_logs')
    op.drop_table('user_operation_logs')
    op.drop_index(op.f('idx_bot_alert_recipients_bot_id'), table_name='bot_alert_recipients')
    op.drop_index(op.f('idx_bot_alert_recipients_user_id'), table_name='bot_alert_recipients')
    op.drop_table('bot_alert_recipients')
    op.drop_index(op.f('idx_wechat_bots_owner_id'), table_name='wechat_bots')
    op.drop_table('wechat_bots')
    op.drop_index(op.f('idx_bot_escalation_recipients_bot_id'), table_name='bot_escalation_recipients')
    op.drop_index(op.f('idx_bot_escalation_recipients_user_id'), table_name='bot_escalation_recipients')
    op.drop_table('bot_escalation_recipients')
    op.drop_index(op.f('idx_bot_knowledge_bases_bot_id'), table_name='bot_knowledge_bases')
    op.drop_index(op.f('idx_bot_knowledge_bases_kb_id'), table_name='bot_knowledge_bases')
    op.drop_table('bot_knowledge_bases')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_table('user')
    op.drop_table('knowledge_bases')
    op.drop_table('ai_models')
    op.drop_index(op.f('idx_bot_configs_bot_id'), table_name='bot_configs')
    op.drop_table('bot_configs')
    op.alter_column('users', 'username',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='用户名，全局唯一',
               existing_nullable=False)
    op.alter_column('users', 'phone',
               existing_type=sa.VARCHAR(length=20),
               comment=None,
               existing_comment='手机号码',
               existing_nullable=False)
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='账户是否激活：true-激活，false-禁用',
               existing_nullable=False,
               existing_server_default=sa.text('true'))
    op.alter_column('users', 'full_name',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='真实姓名',
               existing_nullable=True)
    op.alter_column('users', 'avatar_url',
               existing_type=sa.VARCHAR(length=500),
               comment=None,
               existing_comment='头像URL',
               existing_nullable=True)
    op.alter_column('users', 'id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='用户唯一标识，使用UUID',
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('users', 'hashed_password',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='加密后的密码，推荐使用bcrypt',
               existing_nullable=False)
    op.alter_column('users', 'role',
               existing_type=postgresql.ENUM('super_admin', 'admin', 'user', name='user_role_enum'),
               comment=None,
               existing_comment='用户角色：超级管理员/普通管理员/普通用户',
               existing_nullable=False,
               existing_server_default=sa.text("'user'::user_role_enum"))
    op.alter_column('users', 'created_by_id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='创建者ID，关联users.id，用于追踪用户创建者',
               existing_nullable=True)
    op.alter_column('users', 'last_login_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               comment=None,
               existing_comment='最后登录时间',
               existing_nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               comment=None,
               existing_comment='创建时间',
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               comment=None,
               existing_comment='更新时间',
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index(op.f('idx_users_created_at'), table_name='users')
    op.drop_index(op.f('idx_users_created_by'), table_name='users')
    op.drop_index(op.f('idx_users_is_active'), table_name='users')
    op.drop_index(op.f('idx_users_phone'), table_name='users')
    op.drop_index(op.f('idx_users_role'), table_name='users')
    op.drop_index(op.f('idx_users_role_active_created'), table_name='users')
    op.drop_index(op.f('idx_users_username'), table_name='users')
    op.drop_constraint(op.f('users_username_key'), 'users', type_='unique')
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.drop_constraint(op.f('users_created_by_id_fkey'), 'users', type_='foreignkey')
    op.create_foreign_key(None, 'users', 'users', ['created_by_id'], ['id'])
    op.drop_table_comment(
        'users',
        existing_comment='用户主表',
        schema=None
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table_comment(
        'users',
        '用户主表',
        existing_comment=None,
        schema=None
    )
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.create_foreign_key(op.f('users_created_by_id_fkey'), 'users', 'users', ['created_by_id'], ['id'], ondelete='SET NULL')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.create_unique_constraint(op.f('users_username_key'), 'users', ['username'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_users_username'), 'users', ['username'], unique=False)
    op.create_index(op.f('idx_users_role_active_created'), 'users', ['role', 'is_active', 'created_at'], unique=False)
    op.create_index(op.f('idx_users_role'), 'users', ['role'], unique=False)
    op.create_index(op.f('idx_users_phone'), 'users', ['phone'], unique=False)
    op.create_index(op.f('idx_users_is_active'), 'users', ['is_active'], unique=False)
    op.create_index(op.f('idx_users_created_by'), 'users', ['created_by_id'], unique=False)
    op.create_index(op.f('idx_users_created_at'), 'users', ['created_at'], unique=False)
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               comment='更新时间',
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               comment='创建时间',
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'last_login_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               comment='最后登录时间',
               existing_nullable=True)
    op.alter_column('users', 'created_by_id',
               existing_type=sa.UUID(),
               comment='创建者ID，关联users.id，用于追踪用户创建者',
               existing_nullable=True)
    op.alter_column('users', 'role',
               existing_type=postgresql.ENUM('super_admin', 'admin', 'user', name='user_role_enum'),
               comment='用户角色：超级管理员/普通管理员/普通用户',
               existing_nullable=False,
               existing_server_default=sa.text("'user'::user_role_enum"))
    op.alter_column('users', 'hashed_password',
               existing_type=sa.VARCHAR(length=255),
               comment='加密后的密码，推荐使用bcrypt',
               existing_nullable=False)
    op.alter_column('users', 'id',
               existing_type=sa.UUID(),
               comment='用户唯一标识，使用UUID',
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('users', 'avatar_url',
               existing_type=sa.VARCHAR(length=500),
               comment='头像URL',
               existing_nullable=True)
    op.alter_column('users', 'full_name',
               existing_type=sa.VARCHAR(length=100),
               comment='真实姓名',
               existing_nullable=True)
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment='账户是否激活：true-激活，false-禁用',
               existing_nullable=False,
               existing_server_default=sa.text('true'))
    op.alter_column('users', 'phone',
               existing_type=sa.VARCHAR(length=20),
               comment='手机号码',
               existing_nullable=False)
    op.alter_column('users', 'username',
               existing_type=sa.VARCHAR(length=50),
               comment='用户名，全局唯一',
               existing_nullable=False)
    op.create_table('bot_configs',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('bot_id', sa.BIGINT(), autoincrement=False, nullable=False, comment='关联的机器人ID，一对一关系'),
    sa.Column('role_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('tone_style', sa.VARCHAR(length=50), server_default=sa.text("'professional'::character varying"), autoincrement=False, nullable=False),
    sa.Column('system_prompt', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active_on_work_time', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('work_time_start', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('work_time_end', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('offline_reply_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('auto_accept_friend_request', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('friend_request_keyword_filter', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('friend_request_welcome_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('listen_mode_private_chat', postgresql.ENUM('all', 'none', name='bot_listen_mode_private_enum'), server_default=sa.text("'all'::bot_listen_mode_private_enum"), autoincrement=False, nullable=False),
    sa.Column('listen_mode_group_chat', postgresql.ENUM('none', 'all', 'specified', name='bot_listen_mode_group_enum'), server_default=sa.text("'none'::bot_listen_mode_group_enum"), autoincrement=False, nullable=False),
    sa.Column('reply_trigger_on_mention', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('reply_trigger_words', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('welcome_new_group_member', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('new_member_welcome_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('main_ai_model_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('main_ai_model_params', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('enable_auto_learning', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('learning_scope', postgresql.ENUM('all', 'marked', name='bot_learning_scope_enum'), server_default=sa.text("'marked'::bot_learning_scope_enum"), autoincrement=False, nullable=False),
    sa.Column('learning_mode', postgresql.ENUM('auto', 'manual_approval', name='bot_learning_mode_enum'), server_default=sa.text("'manual_approval'::bot_learning_mode_enum"), autoincrement=False, nullable=False),
    sa.Column('unhandled_question_action', postgresql.ENUM('reply_text', 'escalate', name='bot_unhandled_question_action_enum'), server_default=sa.text("'reply_text'::bot_unhandled_question_action_enum"), autoincrement=False, nullable=False),
    sa.Column('unhandled_question_reply_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('escalation_failed_attempts_trigger', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('escalation_trigger_intent_description', sa.TEXT(), autoincrement=False, nullable=True, comment='触发人工接管的用户意图描述，用于大模型识别'),
    sa.Column('alert_trigger_intent_description', sa.TEXT(), autoincrement=False, nullable=True, comment='触发提醒的用户意图描述，用于大模型识别'),
    sa.Column('max_replies_per_minute', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('responsible_wxid', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['bot_id'], ['wechat_bots.id'], name=op.f('bot_configs_bot_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['main_ai_model_id'], ['ai_models.id'], name=op.f('bot_configs_main_ai_model_id_fkey'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('bot_configs_pkey')),
    sa.UniqueConstraint('bot_id', name=op.f('bot_configs_bot_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='机器人详细配置表'
    )
    op.create_index(op.f('idx_bot_configs_bot_id'), 'bot_configs', ['bot_id'], unique=False)
    op.create_table('ai_models',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('provider', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('ai_models_pkey'))
    )
    op.create_table('knowledge_bases',
    sa.Column('id', sa.BIGINT(), server_default=sa.text("nextval('knowledge_bases_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='knowledge_bases_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('user',
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_superuser', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('full_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('hashed_password', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='user_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_table('bot_knowledge_bases',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('bot_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('kb_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('priority', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False, comment='知识库匹配优先级，0为最高'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['bot_id'], ['wechat_bots.id'], name=op.f('bot_knowledge_bases_bot_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['kb_id'], ['knowledge_bases.id'], name=op.f('bot_knowledge_bases_kb_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('bot_knowledge_bases_pkey')),
    sa.UniqueConstraint('bot_id', 'kb_id', name=op.f('bot_knowledge_bases_bot_id_kb_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='机器人与知识库的关联表'
    )
    op.create_index(op.f('idx_bot_knowledge_bases_kb_id'), 'bot_knowledge_bases', ['kb_id'], unique=False)
    op.create_index(op.f('idx_bot_knowledge_bases_bot_id'), 'bot_knowledge_bases', ['bot_id'], unique=False)
    op.create_table('bot_escalation_recipients',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('bot_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False, comment='接管人用户ID, 关联users.id'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['bot_id'], ['wechat_bots.id'], name=op.f('bot_escalation_recipients_bot_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('bot_escalation_recipients_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('bot_escalation_recipients_pkey')),
    sa.UniqueConstraint('bot_id', 'user_id', name=op.f('bot_escalation_recipients_bot_id_user_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='机器人触发人工接管后的接管人列表'
    )
    op.create_index(op.f('idx_bot_escalation_recipients_user_id'), 'bot_escalation_recipients', ['user_id'], unique=False)
    op.create_index(op.f('idx_bot_escalation_recipients_bot_id'), 'bot_escalation_recipients', ['bot_id'], unique=False)
    op.create_table('wechat_bots',
    sa.Column('id', sa.BIGINT(), server_default=sa.text("nextval('wechat_bots_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('owner_id', sa.UUID(), autoincrement=False, nullable=False, comment='负责人ID，关联users.id'),
    sa.Column('wxid', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='机器人实际微信号，登录后获取'),
    sa.Column('avatar', sa.VARCHAR(length=1024), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('logged_out', 'scanning', 'logged_in', 'error', name='bot_status_enum'), server_default=sa.text("'logged_out'::bot_status_enum"), autoincrement=False, nullable=False, comment='机器人实时状态'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name='wechat_bots_owner_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='wechat_bots_pkey'),
    sa.UniqueConstraint('wxid', name='wechat_bots_wxid_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='微信机器人实例表',
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_wechat_bots_owner_id'), 'wechat_bots', ['owner_id'], unique=False)
    op.create_table('bot_alert_recipients',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('bot_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False, comment='接收提醒的用户ID, 关联users.id'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['bot_id'], ['wechat_bots.id'], name=op.f('bot_alert_recipients_bot_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('bot_alert_recipients_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('bot_alert_recipients_pkey')),
    sa.UniqueConstraint('bot_id', 'user_id', name=op.f('bot_alert_recipients_bot_id_user_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='机器人关键信息提醒的接收人列表'
    )
    op.create_index(op.f('idx_bot_alert_recipients_user_id'), 'bot_alert_recipients', ['user_id'], unique=False)
    op.create_index(op.f('idx_bot_alert_recipients_bot_id'), 'bot_alert_recipients', ['bot_id'], unique=False)
    op.create_table('user_operation_logs',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False, comment='日志ID'),
    sa.Column('operator_id', sa.UUID(), autoincrement=False, nullable=False, comment='操作者用户ID'),
    sa.Column('target_user_id', sa.UUID(), autoincrement=False, nullable=True, comment='被操作的用户ID（如果适用）'),
    sa.Column('operation_type', postgresql.ENUM('login', 'logout', 'create_user', 'update_user', 'delete_user', 'reset_password', 'change_password', 'activate_user', 'deactivate_user', 'create_admin', 'update_admin', 'delete_admin', 'update_profile', name='operation_type_enum'), autoincrement=False, nullable=False, comment='操作类型'),
    sa.Column('operation_details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='操作详情（JSONB格式）'),
    sa.Column('ip_address', postgresql.INET(), autoincrement=False, nullable=True, comment='操作者IP地址'),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True, comment='用户代理信息'),
    sa.Column('result', postgresql.ENUM('success', 'failure', name='operation_result_enum'), autoincrement=False, nullable=False, comment='操作结果'),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True, comment='错误信息（如果操作失败）'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='操作时间'),
    sa.ForeignKeyConstraint(['operator_id'], ['users.id'], name=op.f('user_operation_logs_operator_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['target_user_id'], ['users.id'], name=op.f('user_operation_logs_target_user_id_fkey'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('user_operation_logs_pkey')),
    comment='用户操作日志表'
    )
    op.create_index(op.f('idx_user_operation_logs_target_user_id'), 'user_operation_logs', ['target_user_id'], unique=False)
    op.create_index(op.f('idx_user_operation_logs_result'), 'user_operation_logs', ['result'], unique=False)
    op.create_index(op.f('idx_user_operation_logs_operator_type_created'), 'user_operation_logs', ['operator_id', 'operation_type', 'created_at'], unique=False)
    op.create_index(op.f('idx_user_operation_logs_operator_id'), 'user_operation_logs', ['operator_id'], unique=False)
    op.create_index(op.f('idx_user_operation_logs_operation_type'), 'user_operation_logs', ['operation_type'], unique=False)
    op.create_index(op.f('idx_user_operation_logs_created_at'), 'user_operation_logs', ['created_at'], unique=False)
    op.create_table('user_sessions',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False, comment='会话唯一标识'),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False, comment='用户ID，关联users.id'),
    sa.Column('token_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='JWT Token的哈希值'),
    sa.Column('device_info', sa.TEXT(), autoincrement=False, nullable=True, comment='设备信息（User-Agent等）'),
    sa.Column('ip_address', postgresql.INET(), autoincrement=False, nullable=True, comment='IP地址（支持IPv6）'),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False, comment='会话是否有效：true-有效，false-已失效'),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False, comment='Token过期时间'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='创建时间'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True, comment='更新时间'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_sessions_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('user_sessions_pkey')),
    comment='用户会话表'
    )
    op.create_index(op.f('idx_user_sessions_user_id'), 'user_sessions', ['user_id'], unique=False)
    op.create_index(op.f('idx_user_sessions_user_active_expires'), 'user_sessions', ['user_id', 'is_active', 'expires_at'], unique=False)
    op.create_index(op.f('idx_user_sessions_token_hash'), 'user_sessions', ['token_hash'], unique=False)
    op.create_index(op.f('idx_user_sessions_is_active'), 'user_sessions', ['is_active'], unique=False)
    op.create_index(op.f('idx_user_sessions_expires_at'), 'user_sessions', ['expires_at'], unique=False)
    op.create_table('bot_monitored_chats',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('bot_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('chat_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('chat_type', postgresql.ENUM('group', 'private', name='bot_chat_type_enum'), server_default=sa.text("'group'::bot_chat_type_enum"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['bot_id'], ['wechat_bots.id'], name=op.f('bot_monitored_chats_bot_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('bot_monitored_chats_pkey')),
    sa.UniqueConstraint('bot_id', 'chat_id', name=op.f('bot_monitored_chats_bot_id_chat_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='机器人监控的群聊白名单'
    )
    op.create_index(op.f('idx_bot_monitored_chats_bot_id'), 'bot_monitored_chats', ['bot_id'], unique=False)
    op.create_table('item',
    sa.Column('description', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('owner_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], name=op.f('item_owner_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('item_pkey'))
    )
    # ### end Alembic commands ###
